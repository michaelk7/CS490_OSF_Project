# Generated by Django 4.1.5 on 2023-02-08 02:57

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="DkaData",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                (
                    "age_years_field",
                    models.IntegerField(blank=True, db_column="Age (years)", null=True),
                ),
                (
                    "weight_kg_field",
                    models.FloatField(blank=True, db_column="Weight (kg)", null=True),
                ),
                (
                    "bmi_kg_m2_field",
                    models.FloatField(blank=True, db_column="BMI (kg/m2)", null=True),
                ),
                (
                    "diabetes_type_type_1_0_type_2_1_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Diabetes Type (type 1 = 0, type 2 = 1)",
                        null=True,
                    ),
                ),
                (
                    "gender_0_male_1_female_field",
                    models.IntegerField(
                        blank=True, db_column="Gender (0 = male, 1 = female)", null=True
                    ),
                ),
                (
                    "unit_0_medical_icu_1_intermediate_care_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Unit (0 = Medical ICU, 1 = Intermediate Care)",
                        null=True,
                    ),
                ),
                (
                    "apache_ii_score",
                    models.IntegerField(
                        blank=True, db_column="APACHE II Score", null=True
                    ),
                ),
                (
                    "admission_chloride_meq_l_field",
                    models.IntegerField(
                        blank=True, db_column="Admission Chloride (mEq/L)", null=True
                    ),
                ),
                (
                    "peak_chloride_meq_l_field",
                    models.IntegerField(
                        blank=True, db_column="Peak Chloride (mEq/L)", null=True
                    ),
                ),
                (
                    "peak_chloride_category_0_normochloremia_1_hyperchloremia_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Peak Chloride Category (0 = normochloremia, 1 = hyperchloremia)",
                        null=True,
                    ),
                ),
                (
                    "admission_bicarbonate_meq_l_field",
                    models.IntegerField(
                        blank=True, db_column="Admission Bicarbonate (mEq/L)", null=True
                    ),
                ),
                (
                    "bicarbonate_nadir_meq_l_field",
                    models.IntegerField(
                        blank=True, db_column="Bicarbonate nadir (mEq/L)", null=True
                    ),
                ),
                (
                    "baseline_serum_creatinine_mg_dl_field",
                    models.FloatField(
                        blank=True,
                        db_column="Baseline Serum Creatinine (mg/dL)",
                        null=True,
                    ),
                ),
                (
                    "admission_serum_creatinine_mg_dl_field",
                    models.FloatField(
                        blank=True,
                        db_column="Admission Serum Creatinine (mg/dL)",
                        null=True,
                    ),
                ),
                (
                    "peak_serum_creatinine_mg_dl_field",
                    models.FloatField(
                        blank=True, db_column="Peak Serum Creatinine (mg/dL)", null=True
                    ),
                ),
                (
                    "admission_serum_ph",
                    models.FloatField(
                        blank=True, db_column="Admission Serum pH", null=True
                    ),
                ),
                (
                    "serum_ph_nadir_field",
                    models.FloatField(
                        blank=True, db_column="Serum pH Nadir ", null=True
                    ),
                ),
                (
                    "admission_glucose_mg_dl_field",
                    models.IntegerField(
                        blank=True, db_column="Admission Glucose (mg/dL)", null=True
                    ),
                ),
                (
                    "glucose_peak_mg_dl_field",
                    models.IntegerField(
                        blank=True, db_column="Glucose Peak (mg/dL)", null=True
                    ),
                ),
                (
                    "glucose_nadir_mg_dl_field",
                    models.IntegerField(
                        blank=True, db_column="Glucose Nadir (mg/dL)", null=True
                    ),
                ),
                (
                    "anion_gap_meq_l_field",
                    models.IntegerField(
                        blank=True, db_column="Anion Gap (mEq/L)", null=True
                    ),
                ),
                (
                    "delta_gap_meq_l_field",
                    models.IntegerField(
                        blank=True, db_column="Delta Gap (mEq/L)", null=True
                    ),
                ),
                (
                    "non_anion_gap_acidosis_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Non-anion Gap Acidosis (0 = no, 1 = yes) ",
                        null=True,
                    ),
                ),
                (
                    "volume_of_plasma_lyte_ml_field",
                    models.IntegerField(
                        blank=True, db_column="Volume of Plasma-Lyte (mL)", null=True
                    ),
                ),
                (
                    "total_iv_fluid_volume_ml_field",
                    models.FloatField(
                        blank=True, db_column="Total IV Fluid Volume (mL)", null=True
                    ),
                ),
                (
                    "time_to_final_dka_resolution_hours_field",
                    models.FloatField(
                        blank=True,
                        db_column="Time to Final DKA Resolution (hours)",
                        null=True,
                    ),
                ),
                (
                    "time_to_initial_dka_resolution_hours_field",
                    models.FloatField(
                        blank=True,
                        db_column="Time to Initial DKA Resolution (hours)",
                        null=True,
                    ),
                ),
                (
                    "hospital_length_of_stay_hours_field",
                    models.FloatField(
                        blank=True,
                        db_column="Hospital Length of Stay (hours)",
                        null=True,
                    ),
                ),
                (
                    "acute_kidney_injury_on_admission_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Acute Kidney Injury on Admission (0 = no, 1 yes)",
                        null=True,
                    ),
                ),
                (
                    "acute_kidney_injury_in_hospital_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Acute Kidney Injury In Hospital (0 = no, 1 yes)",
                        null=True,
                    ),
                ),
                (
                    "noncompliance_to_insulin_at_home_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Noncompliance to Insulin at Home (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "infection_as_cause_of_dka_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Infection as Cause of DKA (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "new_onset_diabetes_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="New Onset Diabetes (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "other_cause_of_dka_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Other Cause of DKA (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "sepsis_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True, db_column="Sepsis (0 = no, 1 = yes)", null=True
                    ),
                ),
                (
                    "hypotension_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True, db_column="Hypotension (0 = no, 1 = yes)", null=True
                    ),
                ),
                (
                    "contrast_media_adminsitered_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Contrast Media Adminsitered (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "nsaid_administration_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="NSAID Administration (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "vancomycin_aministration_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Vancomycin Aministration (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "absence_of_any_risk_factor_for_acute_kidney_injury_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Absence of Any Risk Factor for Acute Kidney Injury (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "inappropriate_bicarbonate_use_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Inappropriate Bicarbonate Use (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "serum_potassium_maintenane_within_normal_range_0_no_1_yes_field",
                    models.IntegerField(
                        blank=True,
                        db_column="Serum Potassium Maintenane Within Normal Range (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
                (
                    "subcutaneous_insulin_overlap_by_1_2_hr_0_no_1_yes_field",
                    models.FloatField(
                        blank=True,
                        db_column="Subcutaneous Insulin Overlap by 1-2 hr (0 = no, 1 = yes)",
                        null=True,
                    ),
                ),
            ],
            options={
                "db_table": "DKA_Data",
            },
        ),
    ]
